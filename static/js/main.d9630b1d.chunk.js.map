{"version":3,"sources":["components/Helper/Dice.js","components/DungeonV2/Exit.js","components/DungeonV2/Section.js","components/DungeonV2/Dungeon.js","components/App/App.js","serviceWorker.js","index.js"],"names":["roll","dice","Math","floor","random","Door","seed","console","log","result","door","type","leadsTo","locked","trapped","description","LeadsTo","Archway","archway","Well","well","Passage","Chamber","Stairs","currentExits","stairs","exits","newExits","passage","length","chamber","normalChamberExits","largeChamberExits","chamberExit","Dungeon","props","state","sections","handleClick","bind","back","newSections","this","push","startingArea","StartingArea","setState","event","index","target","value","newSection","pop","className","role","aria-label","map","section","sectionIndex","key","onClick","exit","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.d9630b1d.chunk.js","sourcesContent":["export function roll(dice){\n    return Math.floor(Math.random() * Math.floor(dice)) + 1;;\n}","import {roll} from '../Helper/Dice';\nimport {Chamber, Stairs, Passage} from './Section';\n\nexport const DOOR = 20;\nexport const ARCHWAY = 21;\nexport const WELL = 22;\n\nexport function Door(seed = 0){\n    console.log(\"Generating door\");\n    var result = seed > 0 && seed <= 20 ? seed : roll(20) ;\n    var door = {\n        type: DOOR,\n        leadsTo: null,\n        locked: false,\n        trapped: false\n    }\n    switch(result){\n        case 1:\n        case 2:\n        case 3:\n        case 4:\n        case 5: \n        case 6:\n        case 7: \n        case 8:\n        case 9:\n        case 10:\n            door.description =  \"Wooden door\";\n            door.leadsTo = LeadsTo();\n            door.trapped = !(door.leadsTo) ? true : false;\n            break;\n        case 11:\n        case 12:\n            door.description =  \"Wooden, barred or locked door\";\n            door.leadsTo = LeadsTo();\n            door.locked = true;\n            door.trapped = !(door.leadsTo)  ? true : false;\n            break;\n        case 13:\n            door.description =  \"Stone door\";\n            door.leadsTo = LeadsTo();\n            door.trapped = !(door.leadsTo)  ? true : false;\n            break;\n        case 14:\n            door.description =  \"Stone, barred or locked door\";\n            door.leadsTo = LeadsTo();\n            door.locked = true;\n            door.trapped = !(door.leadsTo)  ? true : false;\n            break;\n        case 15:\n            door.description =  \"Iron door\";\n            door.leadsTo = LeadsTo();\n            door.trapped = !(door.leadsTo)  ? true : false;\n            break;\n        case 16:\n            door.description =  \"Iron, barred or locked door\";\n            door.leadsTo = LeadsTo();\n            door.locked = true;\n            door.trapped = !(door.leadsTo)  ? true : false;\n            break;\n        case 17:\n            door.description =  \"Portcullis door\";\n            door.leadsTo = LeadsTo();\n            door.trapped = !(door.leadsTo)  ? true : false;\n            break;\n        case 18:\n            door.description =  \"Portcullis, barred or locked door\";\n            door.leadsTo = LeadsTo();\n            door.locked = true;\n            door.trapped = !(door.leadsTo)  ? true : false;\n            break;\n        case 19:\n            door.description =  \"Secret door\";\n            door.leadsTo = LeadsTo();\n            door.trapped = !(door.leadsTo)  ? true : false;\n            break;\n        default:\n            door.description =  \"Secret door, barred or locked door\";\n            door.leadsTo = LeadsTo();\n            door.locked = true;\n            door.trapped = !(door.leadsTo)  ? true : false;\n            break;\n    }\n    return door;\n}\n\nexport function Archway(seed = 0){\n    console.log(\"Generating archway\");\n    var archway = {\n        type: ARCHWAY,\n        description: \"An archway\",\n        locked: false,\n        trapped: false,\n        leadsTo: LeadsTo(seed)\n    };\n\n    if(!archway.leadsTo){\n        archway.description = \"An impassable archway\";\n        archway.locked = true;\n    }\n    return archway;\n}\n\nexport function Well(seed = 0){\n    console.log(\"Generating well\");\n    var well = {\n        type: WELL,\n        description: \"A well\",\n        locked: false,\n        trapped: false,\n        leadsTo: LeadsTo(seed)\n    };\n\n    if(!well.leadsTo){\n        well.description = \"An impassable well\";\n        well.locked = true;\n    }\n    return well;\n}\n\nfunction LeadsTo(seed = 0){\n    var result = seed > 0 && seed <= 20 ? seed : roll(20);\n    switch(result){\n        case 1:\n        case 2:\n        case 3:\n        case 4:\n        case 5:\n        case 6:\n        case 7:\n        case 8:\n            return Passage();\n        case 9:\n        case 10:\n        case 11:\n        case 12:\n        case 13:\n        case 14:\n        case 15:\n        case 16:\n        case 17:\n        case 18:\n            return Chamber();\n        case 19:\n            return Stairs();\n        default:\n            return;\n    }\n}","import {roll} from '../Helper/Dice';\nimport {Door, Archway, Well} from './Exit';\n\nexport const STARTING_AREA = 10;\nexport const PASSAGE = 11;\nexport const CHAMBER = 12;\nexport const STAIRS = 13;\n\nexport const MAX_EXITS = 150;\nvar currentExits = 0;\n\n\nfunction updateCurrentExist(newExits){\n    currentExits = currentExits + newExits;\n}\n\nexport function StartingArea(){\n    console.log(\"Generating starting area\");\n    var result = roll(10);\n    var startingArea = {\n        type: STARTING_AREA,\n        exits: 0\n    };\n    switch(result) {\n        case 1:\n            startingArea.description = \"Square, 20 x 20 ft; passage on each wall\";\n            startingArea.exits = [Archway(),Archway(),Archway()];\n            break;\n        case 2:\n            startingArea.description =  \"Square, 20 x 20 ft; door on two walls, passage on third wall\";\n            startingArea.exits = [Door(),Door(),Archway()];\n            break;\n        case 3:\n            startingArea.description = \"Square, 40 x 40 ft; door on three walls\";\n            startingArea.exits = [Door(),Door(),Door()];\n            break;\n        case 4:\n            startingArea.description = \"Rectangle, 80 x 20 ft; passage on each wall\";\n            startingArea.exits = [Door(),Door(),Door()];\n            break;\n        case 5:\n            startingArea.description = \"Rectangle, 20 x 40 ft; passage on each wall\";\n            startingArea.exits = [Archway(),Archway(),Archway()];\n            break;\n        case 6:\n            startingArea.description = \"Circle, 40 ft diameter; one passage at each cardinal direction\";\n            startingArea.exits = [Archway(),Archway(),Archway()];\n            break;\n        case 7:\n            startingArea.description = \"Circle, 40 ft diameter; one passage at each cardinal direction; well in middle of room (might lead down to lower level)\";\n            startingArea.exits = [Archway(),Archway(),Archway(),Well()];\n            break;\n        case 8:\n            startingArea.description = \"Square 20 x 20 ft; door on two walls, passage on third wall, secret door on fourth wall\";\n            startingArea.exits = [Door(),Door(),Archway(),Door()];\n            break;   \n        case 9:\n            startingArea.description =  \"Passage, 10 ft wide; T intersection\";\n            startingArea.exits = [Archway(),Archway()];\n            break;\n        default:\n            startingArea.description =  \"Passage, 10ft wide; four-way intersection\";\n            startingArea.exits = [Archway(),Archway(),Archway(),Archway()];\n            break;\n    } \n    return startingArea;\n}\n\nexport function Stairs(){\n    console.log(\"Generating stairs\");\n    var result = roll(10);\n    var stairs = {\n        type: STAIRS,\n        exits: []\n    };\n    switch(result) {\n        default:\n            stairs.description =  \"No stairs yet!\";\n            break;\n    } \n\n    return stairs;\n}\n\nexport function Passage(){\n    console.log(\"Generating passage\");\n    var result = (currentExits + 1 >= MAX_EXITS) ? 2 : roll(20);\n    var passage = {\n        type: PASSAGE,\n        exits:[]\n    }\n    switch(result){\n        case 1:\n        case 2:\n            passage.description = \"Continue straight 30ft, no doors or side passages\";\n            break;\n        case 3:\n            passage.description =  \"Continue straight 20ft./ door to the right, then an additional 10ft. ahead\";\n            passage.exits = [Door(), Archway()];\n            break;\n        case 4:\n            passage.description =  \"Continue straight 20ft./ door to the left, then an additional 10 ft. ahead\";\n            passage.exits = [Door(), Archway()];\n            break;\n        case 5: \n            passage.description =  \"Continue straight 20ft; passage ends in a door\";\n            passage.exits = [Door()];\n            break;\n        case 6:\n        case 7: \n            passage.description =  \"Continue straight 20ft; side passage to the right, then an additional 10 ft ahead\";\n            passage.exits = [Archway(), Archway()];\n            break;\n        case 8:\n        case 9:\n            passage.description =  \"Continue straight 20ft; side passage to the left, then an additional 10 ft ahead\";\n            passage.exits = [Archway(), Archway()];\n            break;\n        case 10:\n            passage.description =  \"Continue straight 20ft; comes to a dead end; 10 % chance of a secret door\";\n            passage.exits = [Door()];\n            break;\n        case 11:\n        case 12:\n            passage.description =  \"Continue straight 20ft; then the passage turns left and continues 10 ft\";\n            passage.exits = [Archway()];\n            break;\n        case 13:\n        case 14:\n            passage.description =  \"Continue straight 20ft; then the passage turns right anc continues 10ft\";\n            passage.exits = [ Archway()];\n            break;\n        case 15:\n        case 16:\n        case 17:\n        case 18:\n        case 19:\n            passage.description =  \"Chamber\";\n            passage.exits = [Archway(18)];\n            break;\n        default:\n            passage.description =  \"Stairs\";\n            passage.exits = [Archway(19)];\n            break;\n    }\n    updateCurrentExist(passage.exits.length);\n    return passage;\n}\n\nexport function Chamber(){\n    console.log(\"Generating chamber\");\n\n    var result = roll(10);\n    var chamber = {\n        type: CHAMBER,\n        exits: []\n    };\n    switch(result) {\n        case 1:\n        case 2:\n            chamber.description = \"Square, 20 x 20 ft\";\n            chamber.exits = normalChamberExits();\n            break;\n        case 3:\n        case 4:\n            chamber.description = \"Square, 30 x 30 ft\";\n            chamber.exits = normalChamberExits();\n            break;\n        case 5:\n        case 6:\n            chamber.description = \"Square, 40 x 40 ft\";\n            chamber.exits = normalChamberExits();\n            break;\n        case 7:\n        case 8:\n        case 9:\n            chamber.description = \"Rectangle, 20 x 30 ft\";\n            chamber.exits = normalChamberExits();\n            break;\n        case 10:\n        case 11:\n        case 12: \n            chamber.description = \"Rectangle, 30 x 40 ft\";\n            chamber.exits = normalChamberExits();\n            break;\n        case 13:\n        case 14:\n            chamber.description = \"Rectangle, 40 x 50 ft\";\n            chamber.exits = largeChamberExits();\n            break;\n        case 15:\n            chamber.description = \"Rectangle, 50 x 80 ft\";\n            chamber.exits = largeChamberExits();\n            break;\n        case 16:\n            chamber.description = \"Circle, 30ft diameter\";\n            chamber.exits = normalChamberExits();\n            break;\n        case 17:\n            chamber.description = \"Circle, 50ft diameter\";\n            chamber.exits = largeChamberExits();\n            break;\n        case 18:\n            chamber.description = \"Octagon, 40 x 40ft diameter\";\n            chamber.exits = largeChamberExits();\n            break;\n        case 19:\n            chamber.description = \"Octagon, 60 x 60ft diameter\";\n            chamber.exits = largeChamberExits();\n            break;\n        default:\n            chamber.description =  \"Trapezoid, roughly 40 x 60ft\";\n            chamber.exits = largeChamberExits();\n            break;\n    } \n    return chamber;\n}\n\nfunction largeChamberExits(){\n    var result = roll(20);\n    var exits = [];\n\n    switch(result) {\n        case 1:\n        case 2:\n        case 3:\n            exits = [];\n            break;\n        case 4:\n        case 5:\n        case 6:\n        case 7:\n        case 8:\n            exits = [chamberExit()];\n            break;\n        case 9:\n        case 10:\n        case 11:\n        case 12: \n        case 13:\n            exits = [chamberExit(),chamberExit()];\n            break;\n        case 14:\n        case 15:\n        case 16:\n        case 17:\n            exits = [chamberExit(),chamberExit(),chamberExit()];\n            break;\n        case 18:\n            exits = [chamberExit(),chamberExit(),chamberExit(),chamberExit()];\n            break;\n        case 19:\n            exits = [chamberExit(),chamberExit(),chamberExit(),chamberExit(),chamberExit()];\n            break;\n        default:\n            exits = [chamberExit(),chamberExit(),chamberExit(),chamberExit(),chamberExit(),chamberExit()];\n            break;\n    } \n\n    return exits;\n\n}\n\nfunction normalChamberExits(){\n    var result = roll(20);\n    var exits = [];\n\n    switch(result) {\n        case 1:\n        case 2:\n        case 3:\n        case 4:\n        case 5:\n            exits = [];\n            break;\n        case 6:\n        case 7:\n        case 8:\n        case 9:\n        case 10:\n        case 11:\n            exits = [chamberExit()];\n            break;\n        case 12: \n        case 13:\n        case 14:\n        case 15:\n            exits = [chamberExit(),chamberExit()];\n            break;\n        case 16:\n        case 17:\n        case 18:\n            exits = [chamberExit(),chamberExit(),chamberExit()];\n            break;\n        case 19:\n        default:\n            exits = [chamberExit(),chamberExit(),chamberExit(),chamberExit()];\n            break;\n    } \n\n    return exits;\n\n}\n\nfunction chamberExit(){\n    var result = roll(20);\n    return result <= 10 ? Door() : Archway();\n}","import React from 'react';\nimport { StartingArea, STARTING_AREA } from './Section';\nimport './Dungeon.css';\nclass Dungeon extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = { \n            sections: []\n        };   \n        this.handleClick = this.handleClick.bind(this);\n        this.back = this.back.bind(this);\n    }\n\n    componentDidMount() {\n        var newSections = this.state.sections;\n        newSections.push(StartingArea());\n        this.setState({sections: newSections});\n    }\n\n    handleClick(event) {    \n            var index = event.target.value;\n            var newSections = this.state.sections;\n            var opening = newSections[newSections.length -1].exits[index];\n            if(opening.trapped === true) {\n                newSections[newSections.length -1].exits[index].locked = true;\n                newSections[newSections.length -1].exits[index].description = newSections[newSections.length -1].exits[index].description + \"TRAPPED!\";\n            } else {\n                var newSection =  newSections[newSections.length -1].exits[index].leadsTo;\n                newSections.push(newSection);\n            }\n            this.setState(newSections);\n        \n    }\n\n    back() {    \n       \n        var newSections = this.state.sections;\n        newSections.pop();\n        this.setState(newSections);\n    \n    }\n    \n\n    render() {\n       return <div className=\"dungeon\">\n                <span role=\"img\" aria-label=\"skull\">&#x1F480;</span>\n                <p>Refresh for a new dungeon</p>\n                <hr/>\n                {this.state.sections.map((section, sectionIndex) => (\n                    <div>\n                        <em>{ section.description }</em>\n\n                        <p>Exits:</p>\n                        <ul>\n                            {\n                                section.type !== STARTING_AREA? \n                                <li key={sectionIndex+'back'}>{\n                                    section === this.state.sections[this.state.sections.length -1] ? \n                                    <button onClick={this.back}>Back</button> :\n                                    <em>Back</em>\n                                }</li> :\n                                ''\n                            }\n                            {\n                                section.exits.length > 0 ? section.exits.map((exit, index) => (\n                                        <li key={sectionIndex+'exit'+index}>{\n                                            exit.locked !== true &&  section === this.state.sections[this.state.sections.length -1] ?\n                                            <button value={index} onClick={this.handleClick}>{exit.description}</button> :\n                                            <em>{exit.description}</em>\n                                        }</li> \n                                )) : ''\n                            }\n                        </ul>\n                        <hr/>\n                    </div>\n                ))}\n             </div>\n    }\n}\n\nexport default Dungeon;","import React from 'react';\nimport './App.css';\nimport Dungeon from '../DungeonV2/Dungeon';\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header >\n        Zanzer's Dungeon\n      </header>\n      <Dungeon />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}